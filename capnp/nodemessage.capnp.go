// Code generated by capnpc-go. DO NOT EDIT.

package robocapnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type NodeMessage capnp.Struct

// NodeMessage_TypeID is the unique identifier for the type NodeMessage.
const NodeMessage_TypeID = 0xe2866ac3590e2b59

func NewNodeMessage(s *capnp.Segment) (NodeMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NodeMessage(st), err
}

func NewRootNodeMessage(s *capnp.Segment) (NodeMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NodeMessage(st), err
}

func ReadRootNodeMessage(msg *capnp.Message) (NodeMessage, error) {
	root, err := msg.Root()
	return NodeMessage(root.Struct()), err
}

func (s NodeMessage) String() string {
	str, _ := text.Marshal(0xe2866ac3590e2b59, capnp.Struct(s))
	return str
}

func (s NodeMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NodeMessage) DecodeFromPtr(p capnp.Ptr) NodeMessage {
	return NodeMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NodeMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NodeMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NodeMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NodeMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NodeMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s NodeMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NodeMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// NodeMessage_List is a list of NodeMessage.
type NodeMessage_List = capnp.StructList[NodeMessage]

// NewNodeMessage creates a new list of NodeMessage.
func NewNodeMessage_List(s *capnp.Segment, sz int32) (NodeMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[NodeMessage](l), err
}

// NodeMessage_Future is a wrapper for a NodeMessage promised by a client call.
type NodeMessage_Future struct{ *capnp.Future }

func (f NodeMessage_Future) Struct() (NodeMessage, error) {
	p, err := f.Future.Ptr()
	return NodeMessage(p.Struct()), err
}

const schema_85d3acc39d94e0f8 = "x\xda\x12\x08r`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6?R\x9b/\xf2pV\xdb#\x06A!\xc6\xff?" +
	"\x1eL\x99{x\xcd\xe5V\x06VFv\x06\x06\xc1\xa3" +
	"\x9f\x04/\x82\xe8\xb3\xf6\x0c\xba\xff\x93\xf2\xf3\xb3\x8b\xf5" +
	"\x93\xf2\x99\xf2\xb3\x8b\xf5\x92\x13\x0b\xf2\x0a\xac\xfc\xf2S" +
	"R}S\xe5\x8b\x8b\x13\xd3S\x03\x18\x19\x03Y\x98Y" +
	"\x18\x18X\x18\x19\x18\x04y\x9d\x18\x18\x029\x98\x19\x03" +
	"E\x98\x18\xeb\x93\xf3\xf3JR\xf3J\x18y\x19\x98\x18" +
	"y\x19\x18\x01\x01\x00\x00\xff\xff*\xeb#R"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_85d3acc39d94e0f8,
		Nodes: []uint64{
			0xe2866ac3590e2b59,
		},
		Compressed: true,
	})
}
